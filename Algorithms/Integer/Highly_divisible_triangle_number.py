# TODO: Highly divisible triangular number
""" The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

    Let us list the factors of the first seven triangle numbers:

    1: 1
    3: 1,3
    6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

    We can see that 28 is the first triangle number to have over five divisors.
    What is the value of the first triangle number to have over five hundred divisors? """

    #* First-Step: Find the smallest number with 500 divisors. It seems like a good starting point to begin

    #* Second-Step: Starting at the number found in the previous step, search for the next triangle number.
    #* Check o see whether this number has 500+ divisors. if yes, this is the number we were looking for, else...

    #* Third-Step: Check n for which sigma(n) = triangle number found in the previous step.

    #* First-Step: Add(n+1) to the last triangle number found. to find the next triangle number. Check whether 
    #* this number is the answer. If not, repeat Fourth Step till the process terminates.

    # In the First-Step we need to use prime numbers decomposition theorem:

#! Code 
from math import *

# Function to calculate the number of divisors of integer n
def divisors(n):
    limit = int(sqrt(n))
    divisors_list = []
    for i in range(1, limit+1 , 1):
        if n % i == 0:
            divisors_list.append(i)
            if i != n/i:
                divisors_list.append(n/i)
    return len(divisors_list)

# Function to check for triangle numbers
def isTriangleNumber(n):
    a = int(sqrt(2*n))
    return 0.5 * a * (a+1) == n

# Function to calculate the last term of the series adding up to the triangle numbers
def lastTerm(n):
    if isTriangleNumber(n):
        return int(sqrt(2*n))
    else:
        return None

""" As can be seen from the above code, the algorithm to calculate divisors of integer
    is as follows:
    1. Start by inputting a number n
    2. Let an int variable limit = sqrt(n)
    3. Run a loop from i = 1 to i = limit 
        3.1 if n us divisible by i(in loop)
            3.1.1 Add i to the list of divisors
            3.1.2 if i and n/i are unequal, add n/i to the list too.
    4. End """

# First - Step
# First number 'check' to have 500 divisors
check = 2**4 * 3**4 * 5**4 * 7 * 11

# Second - Step
# Starting from 'check', iterate sequentially checking for the next 'triangle' number
while not isTriangleNumber(check):
    check += 1

# Third - Step and Fourth - Step
# Calculate the last term of the series ('seriesLastTerm') that adds up to the newly
# calculate triangle number 'check'

seriesLastTerm = lastTerm(check)

# Iterate over triangle numbers checking for divisors > 500
while divisors(check) <= 500:
    # add the next term to check to get the next triangle numbers
    check += (seriesLastTerm + 1)
    seriesLastTerm = seriesLastTerm + 1
print(check)
#! Answer is 76576500
